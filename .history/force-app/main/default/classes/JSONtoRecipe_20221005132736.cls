//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSONtoRecipe {

	public class ExtendedIngredients {
		public Integer id {get;set;}
		public String aisle {get;set;} 
		public String image {get;set;} 
		public String consistency {get;set;} 
		public String name {get;set;} 
		public String nameClean {get;set;} 
		public String original {get;set;} 
		public String originalName {get;set;} 
		public Double amount {get;set;} 
		public String unit {get;set;} 
		public List<Meta> meta {get;set;} 
		public Measures measures {get;set;} 

		public ExtendedIngredients(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'aisle') {
							aisle = parser.getText();
						} else if (text == 'image') {
							image = parser.getText();
						} else if (text == 'consistency') {
							consistency = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'nameClean') {
							nameClean = parser.getText();
						} else if (text == 'original') {
							original = parser.getText();
						} else if (text == 'originalName') {
							originalName = parser.getText();
						} else if (text == 'amount') {
							amount = parser.getDoubleValue();
						} else if (text == 'unit') {
							unit = parser.getText();
						} else if (text == 'meta') {
							meta = arrayOfMeta(parser);
						} else if (text == 'measures') {
							measures = new Measures(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ExtendedIngredients consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Steps {
		public Integer number_Z {get;set;} // in json: number
		public String step {get;set;} 
		public List<Ingredients> ingredients {get;set;} 
		public List<Ingredients> equipment {get;set;} 
		public Length length {get;set;} 

		public Steps(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'number') {
							number_Z = parser.getIntegerValue();
						} else if (text == 'step') {
							step = parser.getText();
						} else if (text == 'ingredients') {
							ingredients = arrayOfIngredients(parser);
						} else if (text == 'equipment') {
							equipment = arrayOfIngredients(parser);
						} else if (text == 'length') {
							length = new Length(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Steps consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Meta {

		public Meta(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Meta consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AnalyzedInstructions {
		public String name {get;set;} 
		public List<Steps> steps {get;set;} 

		public AnalyzedInstructions(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'steps') {
							steps = arrayOfSteps(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'AnalyzedInstructions consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Measures {
		public Us us {get;set;} 
		public Us metric {get;set;} 

		public Measures(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'us') {
							us = new Us(parser);
						} else if (text == 'metric') {
							metric = new Us(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Measures consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Length {
		public Integer number_Z {get;set;} // in json: number
		public String unit {get;set;} 

		public Length(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'number') {
							number_Z = parser.getIntegerValue();
						} else if (text == 'unit') {
							unit = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Length consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Ingredients {
		public Integer id {get;set;} 
		public String name {get;set;} 
		public String localizedName {get;set;} 
		public String image {get;set;} 

		public Ingredients(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'localizedName') {
							localizedName = parser.getText();
						} else if (text == 'image') {
							image = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Ingredients consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Recipes {
		public Boolean vegetarian {get;set;} 
		public Boolean vegan {get;set;} 
		public Boolean glutenFree {get;set;} 
		public Boolean dairyFree {get;set;} 
		public Boolean veryHealthy {get;set;} 
		public Boolean cheap {get;set;} 
		public Boolean veryPopular {get;set;} 
		public Boolean sustainable {get;set;} 
		public Boolean lowFodmap {get;set;} 
		public Integer weightWatcherSmartPoints {get;set;} 
		public String gaps {get;set;} 
		public Integer preparationMinutes {get;set;} 
		public Integer cookingMinutes {get;set;} 
		public Integer aggregateLikes {get;set;} 
		public Integer healthScore {get;set;} 
		public String creditsText {get;set;} 
		public String license {get;set;} 
		public String sourceName {get;set;} 
		public Double pricePerServing {get;set;} 
		public List<ExtendedIngredients> extendedIngredients {get;set;} 
		public Integer id {get;set;} 
		public String title {get;set;} 
		public Integer readyInMinutes {get;set;} 
		public Integer servings {get;set;} 
		public String sourceUrl {get;set;} 
		public String image {get;set;} 
		public String imageType {get;set;} 
		public String summary {get;set;} 
		public List<Meta> cuisines {get;set;} 
		public List<String> dishTypes {get;set;} 
		public List<String> diets {get;set;} 
		public List<String> occasions {get;set;} 
		public String instructions {get;set;} 
		public List<AnalyzedInstructions> analyzedInstructions {get;set;} 
		public Object originalId {get;set;} 
		public String spoonacularSourceUrl {get;set;} 

		public Recipes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'vegetarian') {
							vegetarian = parser.getBooleanValue();
						} else if (text == 'vegan') {
							vegan = parser.getBooleanValue();
						} else if (text == 'glutenFree') {
							glutenFree = parser.getBooleanValue();
						} else if (text == 'dairyFree') {
							dairyFree = parser.getBooleanValue();
						} else if (text == 'veryHealthy') {
							veryHealthy = parser.getBooleanValue();
						} else if (text == 'cheap') {
							cheap = parser.getBooleanValue();
						} else if (text == 'veryPopular') {
							veryPopular = parser.getBooleanValue();
						} else if (text == 'sustainable') {
							sustainable = parser.getBooleanValue();
						} else if (text == 'lowFodmap') {
							lowFodmap = parser.getBooleanValue();
						} else if (text == 'weightWatcherSmartPoints') {
							weightWatcherSmartPoints = parser.getIntegerValue();
						} else if (text == 'gaps') {
							gaps = parser.getText();
						} else if (text == 'preparationMinutes') {
							preparationMinutes = parser.getIntegerValue();
						} else if (text == 'cookingMinutes') {
							cookingMinutes = parser.getIntegerValue();
						} else if (text == 'aggregateLikes') {
							aggregateLikes = parser.getIntegerValue();
						} else if (text == 'healthScore') {
							healthScore = parser.getIntegerValue();
						} else if (text == 'creditsText') {
							creditsText = parser.getText();
						} else if (text == 'license') {
							license = parser.getText();
						} else if (text == 'sourceName') {
							sourceName = parser.getText();
						} else if (text == 'pricePerServing') {
							pricePerServing = parser.getDoubleValue();
						} else if (text == 'extendedIngredients') {
							extendedIngredients = arrayOfExtendedIngredients(parser);
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'readyInMinutes') {
							readyInMinutes = parser.getIntegerValue();
						} else if (text == 'servings') {
							servings = parser.getIntegerValue();
						} else if (text == 'sourceUrl') {
							sourceUrl = parser.getText();
						} else if (text == 'image') {
							image = parser.getText();
						} else if (text == 'imageType') {
							imageType = parser.getText();
						} else if (text == 'summary') {
							summary = parser.getText();
						} else if (text == 'cuisines') {
							cuisines = arrayOfMeta(parser);
						} else if (text == 'dishTypes') {
							dishTypes = arrayOfString(parser);
						} else if (text == 'diets') {
							diets = arrayOfString(parser);
						} else if (text == 'occasions') {
							occasions = arrayOfString(parser);
						} else if (text == 'instructions') {
							instructions = parser.getText();
						} else if (text == 'analyzedInstructions') {
							analyzedInstructions = arrayOfAnalyzedInstructions(parser);
						} else if (text == 'originalId') {
							originalId = parser.readValueAs(Object.class);
						} else if (text == 'spoonacularSourceUrl') {
							spoonacularSourceUrl = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Recipes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Recipes> recipes {get;set;} 

	public JSONtoRecipe(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'recipes') {
						recipes = arrayOfRecipes(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSONtoRecipe consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Us {
		public Double amount {get;set;} 
		public String unitShort {get;set;} 
		public String unitLong {get;set;} 

		public Us(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'amount') {
							amount = parser.getDoubleValue();
						} else if (text == 'unitShort') {
							unitShort = parser.getText();
						} else if (text == 'unitLong') {
							unitLong = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Us consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSONtoRecipe parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSONtoRecipe(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	









    private static List<Steps> arrayOfSteps(System.JSONParser p) {
        List<Steps> res = new List<Steps>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Steps(p));
        }
        return res;
    }






    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


    private static List<AnalyzedInstructions> arrayOfAnalyzedInstructions(System.JSONParser p) {
        List<AnalyzedInstructions> res = new List<AnalyzedInstructions>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AnalyzedInstructions(p));
        }
        return res;
    }







    private static List<ExtendedIngredients> arrayOfExtendedIngredients(System.JSONParser p) {
        List<ExtendedIngredients> res = new List<ExtendedIngredients>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ExtendedIngredients(p));
        }
        return res;
    }



    private static List<Meta> arrayOfMeta(System.JSONParser p) {
        List<Meta> res = new List<Meta>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Meta(p));
        }
        return res;
    }


    private static List<Ingredients> arrayOfIngredients(System.JSONParser p) {
        List<Ingredients> res = new List<Ingredients>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Ingredients(p));
        }
        return res;
    }


    private static List<Recipes> arrayOfRecipes(System.JSONParser p) {
        List<Recipes> res = new List<Recipes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Recipes(p));
        }
        return res;
    }


}